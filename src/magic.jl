#=
        Chess.jl: A Julia chess programming library
        Copyright (C) 2019 Tord Romstad

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Affero General Public License as
        published by the Free Software Foundation, either version 3 of the
        License, or (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Affero General Public License for more details.

        You should have received a copy of the GNU Affero General Public License
        along with this program.  If not, see <https://www.gnu.org/licenses/>.
=#

using StaticArrays


struct Magic
    mask::UInt64
    mul::UInt64
    shift::Int32
    index::Int32
end


const B_MAGIC = SVector(
    Magic(18049651735527936, 36626935706583168, 58, 0),
    Magic(70506452091904, 577103421212035084, 59, 64),
    Magic(275415828992, 18579548576744452, 59, 96),
    Magic(1075975168, 145333462000205832, 59, 128),
    Magic(38021120, 578169462159577104, 59, 160),
    Magic(8657588224, 3566007889787489280, 59, 192),
    Magic(2216338399232, 1126484182311424, 59, 224),
    Magic(567382630219776, 10841270582838278, 58, 256),
    Magic(9024825867763712, 9232874085095180368, 59, 320),
    Magic(18049651735527424, 94610879663866400, 59, 352),
    Magic(70506452221952, 720595748839882752, 59, 384),
    Magic(275449643008, 577168907618754688, 59, 416),
    Magic(9733406720, 11745394502829875216, 59, 448),
    Magic(2216342585344, 2293781233680, 59, 480),
    Magic(567382630203392, 4611689456584368322, 59, 512),
    Magic(1134765260406784, 9227876194845721088, 59, 544),
    Magic(4512412933816832, 4652219070325753472, 59, 576),
    Magic(9024825867633664, 1139164981535745, 59, 608),
    Magic(18049651768822272, 149744696202234368, 57, 640),
    Magic(70515108615168, 2884564383764070528, 57, 768),
    Magic(2491752130560, 577586687140955264, 57, 896),
    Magic(567383701868544, 30751147784409092, 57, 1024),
    Magic(1134765256220672, 2684297127705972736, 59, 1152),
    Magic(2269530512441344, 671107830517999625, 59, 1184),
    Magic(2256206450263040, 5206935775735972864, 59, 1216),
    Magic(4512412900526080, 1442279982105641224, 59, 1248),
    Magic(9024834391117824, 4648014982389432610, 57, 1280),
    Magic(18051867805491712, 4634208415688691744, 55, 1408),
    Magic(637888545440768, 282643258163200, 55, 1920),
    Magic(1135039602493440, 594620836657766400, 57, 2432),
    Magic(2269529440784384, 1218259035128328, 59, 2560),
    Magic(4539058881568768, 572020957925904, 59, 2592),
    Magic(1128098963916800, 473177067408607232, 59, 2624),
    Magic(2256197927833600, 1227232565041046532, 59, 2656),
    Magic(4514594912477184, 1126039501930752, 57, 2688),
    Magic(9592139778506752, 9225626037906833536, 55, 2816),
    Magic(19184279556981248, 18016606122707072, 55, 3328),
    Magic(2339762086609920, 158752994966390800, 57, 3840),
    Magic(4538784537380864, 864981421608436736, 59, 3968),
    Magic(9077569074761728, 1689167838986768, 59, 4000),
    Magic(562958610993152, 288388740725868576, 59, 4032),
    Magic(1125917221986304, 1128410919508228, 59, 4064),
    Magic(2814792987328512, 4574123258872064, 57, 4096),
    Magic(5629586008178688, 282162574148864, 57, 4224),
    Magic(11259172008099840, 4613940154854285828, 57, 4352),
    Magic(22518341868716544, 153162041186583584, 57, 4480),
    Magic(9007336962655232, 2310364209655186080, 59, 4608),
    Magic(18014673925310464, 4991114845651731974, 59, 4640),
    Magic(2216338399232, 1197575531136034, 59, 4672),
    Magic(4432676798464, 45638545897160708, 59, 4704),
    Magic(11064376819712, 36178897544970280, 59, 4736),
    Magic(22137335185408, 4900488141171326976, 59, 4768),
    Magic(44272556441600, 1729945275616862208, 59, 4800),
    Magic(87995357200384, 1225266105808912448, 59, 4832),
    Magic(35253226045952, 4749993329049665, 59, 4864),
    Magic(70506452091904, 12126810619538112803, 59, 4896),
    Magic(567382630219776, 9228450699350777856, 58, 4928),
    Magic(1134765260406784, 27022426827468800, 59, 4992),
    Magic(2832480465846272, 362680787772035106, 59, 5024),
    Magic(5667157807464448, 18858823716701184, 59, 5056),
    Magic(11333774449049600, 153122396054946817, 59, 5088),
    Magic(22526811443298304, 1155174678944354562, 59, 5120),
    Magic(9024825867763712, 325561029315010688, 59, 5152),
    Magic(18049651735527936, 2379105703026499648, 58, 5184),
)


const R_MAGIC = SVector(
    Magic(282578800148862, 144132922004340801, 52, 5248),
    Magic(565157600297596, 54043471211683840, 53, 9344),
    Magic(1130315200595066, 144126183468974112, 53, 11392),
    Magic(2260630401190006, 324276767504728180, 53, 13440),
    Magic(4521260802379886, 144119654875400224, 53, 15488),
    Magic(9042521604759646, 1369096502923821096, 53, 17536),
    Magic(18085043209519166, 4755802735545157768, 53, 19584),
    Magic(36170086419038334, 72059795487737088, 52, 21632),
    Magic(282578800180736, 4629841155498999840, 53, 25728),
    Magic(565157600328704, 414472178092744704, 54, 27776),
    Magic(1130315200625152, 140806216228864, 54, 28800),
    Magic(2260630401218048, 141287378391040, 54, 29824),
    Magic(4521260802403840, 218565336596217984, 54, 30848),
    Magic(9042521604775424, 577023779584087144, 54, 31872),
    Magic(18085043209518592, 4785093964988672, 54, 32896),
    Magic(36170086419037696, 563091721961604, 53, 33920),
    Magic(282578808340736, 3494794685233242112, 53, 35968),
    Magic(565157608292864, 76570264640430081, 54, 38016),
    Magic(1130315208328192, 9572348504605216, 54, 39040),
    Magic(2260630408398848, 9432160767313924, 54, 40064),
    Magic(4521260808540160, 27162885075503105, 54, 41088),
    Magic(9042521608822784, 564053760278536, 54, 42112),
    Magic(18085043209388032, 1103806726148, 54, 43136),
    Magic(36170086418907136, 4758354273057128588, 53, 44160),
    Magic(282580897300736, 2017823792981643552, 53, 46208),
    Magic(565159647117824, 81064948986282048, 54, 48256),
    Magic(1130317180306432, 585608835076587592, 54, 49280),
    Magic(2260632246683648, 18735697465180544, 54, 50304),
    Magic(4521262379438080, 1225260595101566976, 54, 51328),
    Magic(9042522644946944, 13853076853985771648, 54, 52352),
    Magic(18085043175964672, 10135865121571080, 54, 53376),
    Magic(36170086385483776, 281479273795714, 53, 54400),
    Magic(283115671060736, 2846276201486483521, 53, 56448),
    Magic(565681586307584, 9042452350517248, 54, 58496),
    Magic(1130822006735872, 2314920714668347658, 54, 59520),
    Magic(2261102847592448, 11605776274101899392, 54, 60544),
    Magic(4521664529305600, 144978309082515456, 54, 61568),
    Magic(9042787892731904, 3941079741106192, 54, 62592),
    Magic(18085034619584512, 1152923162531336232, 54, 63616),
    Magic(36170077829103616, 277058946049, 53, 64640),
    Magic(420017753620736, 13979314119359102976, 53, 66688),
    Magic(699298018886144, 576777415142227968, 54, 68736),
    Magic(1260057572672512, 9952957392692973569, 54, 69760),
    Magic(2381576680245248, 4632022628445585440, 54, 70784),
    Magic(4624614895390720, 4791838799900508164, 54, 71808),
    Magic(9110691325681664, 10386431038703304832, 54, 72832),
    Magic(18082844186263552, 578167368380055566, 54, 73856),
    Magic(36167887395782656, 9223389908356431876, 53, 74880),
    Magic(35466950888980736, 4785351629746432, 53, 76928),
    Magic(34905104758997504, 1166502672786817280, 54, 78976),
    Magic(34344362452452352, 2305864175425028608, 54, 80000),
    Magic(33222877839362048, 2305878267707566592, 54, 81024),
    Magic(30979908613181440, 146367005070098560, 54, 82048),
    Magic(26493970160820224, 9265034801249781761, 54, 83072),
    Magic(17522093256097792, 288380532772441088, 54, 84096),
    Magic(35607136465616896, 74768942432768, 53, 85120),
    Magic(9079539427579068672, 1161634186985665, 52, 87168),
    Magic(8935706818303361536, 17867200299265, 53, 91264),
    Magic(8792156787827803136, 634427336034833, 53, 93312),
    Magic(8505056726876686336, 1179952036171546709, 53, 95360),
    Magic(7930856604974452736, 563023102353410, 53, 97408),
    Magic(6782456361169985536, 563018740107266, 53, 99456),
    Magic(4485655873561051136, 146648617518631065, 53, 101504),
    Magic(9115426935197958144, 9799833905986027650, 52, 103552),
)


function magicindex(m::Magic, b::UInt64)
    m.index + Int32(((b & m.mask) * m.mul) >> m.shift) + 1
end


function indextou64(index::Int, bits::Int, mask::UInt64)
    result = UInt64(0)
    m = mask
    for i in 0:(bits - 1)
        j = trailing_zeros(m)
        m &= m - 1
        if (index & (1 << i)) != 0
            result |= UInt64(1) << j
        end
    end
    result
end


function square(file, rank)
    file * 8 + rank
end


function ratt(s, block)
    result = UInt64(0)
    (fl, rk) = fldmod(s, 8)
    for r in (rk + 1):7
        s = square(fl, r)
        result |= UInt64(1) << s
        if (block & UInt64(1) << s) != 0
            break
        end
    end
    for r in (rk - 1):-1:0
        s = square(fl, r)
        result |= UInt64(1) << s
        if (block & UInt64(1) << s) != 0
            break
        end
    end
    for f in (fl + 1):7
        s = square(f, rk)
        result |= UInt64(1) << s
        if (block & UInt64(1) << s) != 0
            break
        end
    end
    for f in (fl - 1):-1:0
        s = square(f, rk)
        result |= UInt64(1) << s
        if (block & UInt64(1) << s) != 0
            break
        end
    end
    result
end


function batt(s, block)
    result = UInt64(0)
    (fl, rk) = fldmod(s, 8)
    for i in 1:7
        if fl + i <= 7 && rk + i <= 7
            s = UInt64(1) << square(fl + i, rk + i)
            result |= s
            if (block & s) != 0
                break
            end
        end
    end
    for i in 1:7
        if fl + i <= 7 && rk - i >= 0
            s = UInt64(1) << square(fl + i, rk - i)
            result |= s
            if (block & s) != 0
                break
            end
        end
    end
    for i in 1:7
        if fl - i >= 0 && rk + i <= 7
            s = UInt64(1) << square(fl - i, rk + i)
            result |= s
            if (block & s) != 0
                break
            end
        end
    end
    for i in 1:7
        if fl - i >= 0 && rk - i >= 0
            s = UInt64(1) << square(fl - i, rk - i)
            result |= s
            if (block & s) != 0
                break
            end
        end
    end
    result
end


function computeattackdb()
    result = Array{UInt64, 1}(zeros(107648))
    for s in 0:63
        m = B_MAGIC[s + 1]
        bits = 64 - m.shift
        for i in 0:((1 << bits) - 1)
            b = indextou64(i, bits, m.mask)
            result[magicindex(m, b)] = batt(s, b)
        end
        m = R_MAGIC[s + 1]
        bits = 64 - m.shift
        for i in 0:((1 << bits) - 1)
            b = indextou64(i, bits, m.mask)
            result[magicindex(m, b)] = ratt(s, b)
        end
    end
    result
end


const ATTACK_DB = computeattackdb()


function bishopattacks(b::UInt64, s::Int)
    @inbounds ATTACK_DB[magicindex(B_MAGIC[s], b)]
end


function rookattacks(b::UInt64, s::Int)
    @inbounds ATTACK_DB[magicindex(R_MAGIC[s], b)]
end
